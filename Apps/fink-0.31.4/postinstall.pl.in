#!/usr/bin/perl -w
#
# postinstall.pl - perl script to check and store which OS version we
#                are running, and to setup the dists directory in
#                new (post-10.1) format
#
# Fink - a package manager that downloads source and installs it
# Copyright (c) 2001 Christoph Pfisterer
# Copyright (c) 2001-2011 The Fink Package Manager Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA.
#

$| = 1;
use 5.008_001;  # perl 5.8.1 or newer required
use strict;

use lib "@PREFIX@/lib/perl5";

use Fink::Bootstrap qw(&check_host &add_injected_to_trees &get_selfupdatetrees);
use Fink::Services qw(&read_config &execute &apt_available);
use Fink::CLI qw(&print_breaking &prompt_boolean);

use Fink::Config qw($config);
use Fink::Configure qw($conf_file_compat_version &spotlight_warning);

use File::Find;
use File::Basename;

my $arch = shift;

my ($basepath);
$basepath = "@PREFIX@";

# read the configuration file
my $config;
my $configpath = "@PREFIX@/etc/fink.conf";
my $configNeedsUpdate = 0;

if (-f $configpath) {
	$config = &Fink::Services::read_config($configpath, 
										  { Basepath => '@PREFIX@' }
										  );
} else {
  print "ERROR: Configuration file \"$configpath\" not found.\n";
  exit 1;
}


### check if we need to rerun configure since the fink.conf file
### compatibility version has changed.
my $expectedConfFileCompatVersion = $Fink::Configure::conf_file_compat_version;
my $actualConfFileCompatVersion = $config->param_default("ConfFileCompatVersion", "0");

if ($expectedConfFileCompatVersion > $actualConfFileCompatVersion) {
	$configNeedsUpdate = 1;
}
elsif ($expectedConfFileCompatVersion < $actualConfFileCompatVersion) {
	&print_breaking("\nWARNING: Your fink configuration file \"$configpath\" " .
        "was created from a fink version newer than this one! Try to run " .
        "'fink configure' or reinstall the latest fink to correct this.\n\n");
}


### check if we like this system

print "Checking system...";
my ($host);

my ($distribution);

$host = `$basepath/lib/fink/update/config.guess`;
chomp($host);
if ($host =~ /^\s*$/) {
  print " ERROR: Can't determine host type.\n";
  exit 1;
}
print " $host\n";

$distribution = check_host($host,0,$arch);
if ($distribution eq "unknown") {
	exit(1);
}

### save $distribution in the config file, after reading old value

my $distold = $config->param("Distribution");

$config->set_param("Distribution", $distribution);
$config->save();

### are we updating?

my $updating = 0;

if ( not ($distold eq $distribution)) {
    add_injected_to_trees($distribution);
    $updating = 1;
### FIXME: this variable is a hook to action in Fink::SelfUpdate::finish,
### but that action has not yet been implemented.  (The variable should
### be zeroed out in SelfUpdate.pm after the action has been taken.)
    $config->set_param("UpdateFrom", $distold);
### add packages depending on which Update
    if (($distold eq "10.4") and (($distribution eq "10.5") or ($distribution eq "10.6"))) {
	$config->set_param("UpdatePackages", "perl586-core, rman");
    }
    $config->save();
}

### Find the user who owns dists

my ($username, @sb, $distdir);

$distdir = "$basepath/fink/dists" ;
$username = "root" ;

if (-d "$distdir/CVS") {
  @sb = stat("$distdir/CVS");
  if ($sb[4] != 0 and $> != $sb[4]) {
    ($username) = getpwuid($sb[4]);
  }
}

### NOTE: The code below, through the label "END OF 10.1 UPGRADE", may
### enable a direct upgrade from 10.1 to the current distribution.  Since
### 10.1 is so old, there is no effective way to test this, but it seems
### harmless to leave the code in place in case it works.
###
### If the old dists directory has not yet been moved to $basepath/fink/10.1:
###  1) move it there, add appropriate symlinks to dists
###  2) re-do the symlinks in /sw/fink/debs to point to the new locations
###  3) to enable apt to find these old debs, we need some additions to
###     $basepath/etc/apt/sources.list which are made in Config.pm

my $basenm;

if (not -l $distdir) {
  print "Needs an update...\n";
  rename $distdir, "$basepath/fink/10.1" or die "cannot rename $distdir to $basepath/fink/10.2";
  symlink "$basepath/fink/10.1", "$distdir" or die "ERROR: Can't create link from $basepath/fink/10.1 to $distdir\n";

  ### we create a place where apt can find the old deb files (via symlink)

  mkdir "$basepath/fink/old";
  unlink "$basepath/fink/old/dists";
  symlink "$basepath/fink/10.1", "$basepath/fink/old/dists" or die "ERROR: Can't create link from $basepath/fink/10.1 to $basepath/fink/old/dists\n";


  ### Now see if CVS is present...
  ### If it is, we need to create $basepath/fink/10.2 as well as setup CVS
  ### in both $basepath/fink/10.1 and $basepath/fink/10.2

  if (-d $basepath."/fink/CVS") {
    print "\n NOTE: You have fink set up to use CVS for updates, and with this\n version of fink, the CVS setup has slightly changed.  After fink has\n finished setting up, you should immediately run 'fink selfupdate-cvs',\n 'fink scanpackages', and then 'apt-get update' in order to \n complete your upgrade.\n\n";
    if (not -d $basepath."/fink/10.2") {
      if(&execute("/bin/mkdir -p $basepath/fink/10.2/local/main/finkinfo")) {
	print "ERROR: couldn't create directory $basepath/fink/10.2/local/main/finkinfo\n";
	exit 1;
      }
      if (&execute("/usr/sbin/chown -R $username $basepath/fink/10.2")) {
	print "ERROR: couldn't change ownership of $basepath/fink/10.2 to $username\n";
	exit 1;
      }
    }
    
    ### clear out files which will be recreated by CVS:
    unlink "$basepath/fink/.cvsignore", "$basepath/fink/ChangeLog", "$basepath/fink/README", "$basepath/fink/VERSION", "$basepath/fink/inject.pl", "$basepath/fink/stamp-cvs-live";

    ### clear out CVS files which we are going to rewrite
    unlink "$basepath/fink/CVS/Entries", "$basepath/fink/CVS/Repository";


    ### write CVS files by hand

    open(REPOSITORY, ">$basepath/fink/CVS/Repository") or die "can't create $basepath/fink/CVS/Repository";
    print REPOSITORY <<"EOF";
/cvsroot/fink/dists
EOF
    close(REPOSITORY) or die "can't write $basepath/fink/CVS/Repository";
    open(ENTRIES, ">$basepath/fink/CVS/Entries") or die "can't create $basepath/fink/CVS/Entries";
    print ENTRIES <<"EOF";
D/10.1////
D/10.2////
/.cvsignore/1.1/Tue Aug 20 22:01:32 2002//
EOF
    close(ENTRIES) or die "can't write $basepath/fink/CVS/Entries";
    if (&execute("/bin/mkdir $basepath/fink/10.2/CVS")) {
      print "ERROR: Can't create directory $basepath/fink/10.2/CVS\n";
      exit 1;
    }
    if (&execute("cp $basepath/fink/10.1/CVS/Root $basepath/fink/10.2/CVS")) {
      print "ERROR: Can't copy $basepath/fink/10.1/CVS/Root to $basepath/fink/10.2/CVS\n";
      exit 1;
    }
    open(REPOSITORY, ">$basepath/fink/10.2/CVS/Repository") or die "can't create $basepath/fink/10.2/CVS/Repository";
    print REPOSITORY <<"EOF";
/cvsroot/fink/dists/10.2
EOF
    close(REPOSITORY) or die "can't write $basepath/fink/10.2/CVS/Repository";
    open(ENTRIES, ">$basepath/fink/10.2/CVS/Entries") or die "can't create $basepath/fink/10.2/CVS/Entries";
    print ENTRIES <<"EOF";
D
EOF
    close(ENTRIES) or die "can't write $basepath/fink/10.2/CVS/Entries";
    if (&execute("/usr/sbin/chown -R $username $basepath/fink/10.2/CVS")) {
      print "ERROR: Can't change ownership of $basepath/fink/10.2/CVS to $username\n";
      exit 1;
    }
}

  ### We create new symlinks in $basepath/fink/debs to point to the existing
  ### debs in the 10.1 tree
  
  my $wanted = 
    sub {
      if (($File::Find::fullname =~ /\.deb$/)) {    
	$basenm = basename($File::Find::fullname);
	unlink "$basepath/fink/debs/$basenm" ;
	symlink "$File::Find::fullname", "$basepath/fink/debs/$basenm" or die "ERROR: Can't create link from $File::Find::fullname to $basepath/fink/debs/$basenm";
      }
    };
  find ({ wanted => $wanted, follow => 1,  no_chdir => 1 }, "$basepath/fink/10.1");
}

### END OF 10.1 UPGRADE


### Now, if we are running 10.2 or later, we need to create $basepath/fink/10.2
### if still needed, and then make a symlink

if (($distribution eq "10.1") or ($distribution eq "10.2") or ($distribution eq "10.3") or ($distribution eq "10.4-transitional")) {
    print "ERROR: The current version of fink cannot be used with the $distribution distribution.\nPlease use an appropriate earlier version of fink.\n";
    exit 1;
}

my $distroot = get_selfupdatetrees($distribution);
my $selfupdatetree = $distroot;

# At some time in the past, 10.4 may have been a symlink to 10.4-transitional;
# we want to undo that.

### FIXME: of course, we are not checking on other bad conditions which may
### exist if this symlink is still pointing to 10.4-transitional

if (-l "$basepath/fink/10.4") {
    unlink "$basepath/fink/10.4";
}

# If $distroot is different from $distribution, we need a symlink between them.

my $notlink;

if ( not ($distribution eq $distroot)) {
    $notlink = "1";
### we want $basepath/fink/$distribution to be a symlink, but if it already exists
### and is *not* a symlink (or not the correct symlink), we move it out of
### the way first
    if (-l "$basepath/fink/$distribution") {
	if (readlink("$basepath/fink/$distribution") eq "$distroot") {
	    $notlink = "0";
	}
    }
    if (-e "$basepath/fink/$distribution") {
	if (-e "$basepath/fink/$distribution.old") {
	   my $aanswer = &prompt_boolean("\nWARNING: you have an obsolete file or directory $basepath/fink/$distribution.old which must be removed before the installation can continue; do you want to remove it now?\n", default => 1, timeout => 60);
	   if ($aanswer) {
	    if (&execute("/bin/rm -rf $basepath/fink/$distribution.old")) {
		print "ERROR: Cannot remove $basepath/fink/$distribution.old\n";
		exit 1;
	    }
	   } else {
	       print "\nOK: please run 'fink reinstall fink' when you are ready to have this file or directory deleted.\n\n";
	       exit 1;
	   }
	   
	}
	if ($notlink) {
	    if (&execute("/bin/mv $basepath/fink/$distribution $basepath/fink/$distribution.old")) {
		print "ERROR: Can't move $basepath/fink/$distribution to $basepath/fink/$distribution.old\n";
		exit 1;
	    }
	    print "\nWARNING: An unexpected file or directory $basepath/fink/$distribution was found,\nand was moved to $basepath/fink/$distribution.old .  It will be deleted the next time\nfink is updated, unless you have deleted it yourself before then.\n\n";
	}
    }
    if ($notlink) {
	if (&execute("ln -s $distroot $basepath/fink/$distribution")) {
	    print "ERROR: Can't create link from $distroot to $basepath/fink/$distribution\n";
	    exit 1;
	}
    }
}

if (not -d $basepath."/fink/".$distroot) {
    if(&execute("/bin/mkdir -p $basepath/fink/$distroot/local/main/finkinfo")) {
	print "ERROR: couldn't create directory $basepath/fink/$distroot/local/main/finkinfo\n";
	exit 1;
    }
    if (&execute("/usr/sbin/chown -R $username $basepath/fink/$distroot")) {
	print "ERROR: couldn't change ownership of $basepath/fink/$distroot to $username\n";
	exit 1;
    }
}
unlink $distdir;

if (&execute("ln -s $distribution $distdir")) {
    print "ERROR: Can't create link from $distribution to $distdir\n";
    exit 1;
}

# If SelfUpdateTrees is not defined, or just has a single entry, we update
# the entry to $selfupdatetree.  Otherwise, we append $selfupdatetree
# to the entry (unless it is already present).
# 
# Note that SelfUpdateCVSTrees was used for a while before SelfUpdateTrees,
# so we use that one if it is present and SelfUpdateTrees is absent.  (We
# also zero out SelfUpdateCVSTrees at the end, to avoid future confusion.)
my @alltrees = ();
my $SUTrees = "";
if (defined $config->param("SelfUpdateTrees")) {
    $SUTrees = $config->param("SelfUpdateTrees") ;
    @alltrees = split(/\s+/, $SUTrees);
} else {
    if (defined $config->param("SelfUpdateCVSTrees")) {
	$SUTrees = $config->param("SelfUpdateCVSTrees");
	@alltrees = split(/\s+/, $SUTrees);
    }
}
if (scalar @alltrees eq "1") {
    $SUTrees = "";
    @alltrees=();
}
for my $tree (@alltrees) {
    $selfupdatetree = "" if ($tree eq $selfupdatetree);
}
my $SUTreesEntry = $SUTrees . " " . $selfupdatetree;
$SUTreesEntry =~ s/(^\s+|\s+$)//g;
$config->set_param("SelfUpdateTrees", $SUTreesEntry);
$config->set_param("SelfUpdateCVSTrees", "");
$config->save();

# Now that we've symlinked to the new directory, we can copy over the
# update packages if we are updating.

if ($updating) {
    if(&execute("/bin/mkdir -p $basepath/fink/dists/local/injected/finkinfo/update-packages")) {
	print "ERROR: couldn't create directory $basepath/fink/dists/local/injected/finkinfo/update-packages\n";
	exit 1;
    }
# just in case we need to overwrite something, use cp -f
    if (&execute("cp -f $basepath/lib/fink/update-packages/* $basepath/fink/dists/local/injected/finkinfo/update-packages")) {
	print "ERROR: couldn't copy package desriptions to $basepath/fink/dists/local/injected/finkinfo/update-packages\n";
	exit 1;
    }
}

# If a user upgrades to a new fink with AutoScanpackages, we'd rather do the
# first (uncached, long) scan in postinst than at the end of the user's next
# build.
sub pre_scanpackages {
	my $autoscan = !$config->has_param("AutoScanpackages")
		|| $config->param_boolean("AutoScanpackages");
	return 0 unless $autoscan && apt_available;

	require Fink::Scanpackages;
	my $cache = Fink::Scanpackages->default_cache;
	return 0 if -e $cache; # we already ran scanpackages at some point
	
	print STDERR "Caching your binary packages...this may take a while.\n";
	
	# Don't use the PDB, we don't want to trigger an index now
	require Fink::Engine;
	Fink::Engine::scanpackages({ pdb => 0 });
	return 1;
}
pre_scanpackages();

if ($configNeedsUpdate) {
  &print_breaking("\nThis fink version introduces new settings stored in the " .
        "fink configuration file \"$configpath\". You should rerun the " .
        "configuration process.\n");
  my $answer = &prompt_boolean("Do you want to configure now?", default => 0,
  	timeout => 60);
  if ($answer) {
    require Fink::Configure;
    Fink::Configure::configure();
  }
  else {
    print "Please remember to call 'fink configure' later!\n\n";
  }
} else {
	# Only ask if not configuring, configure will ask later
	if (&spotlight_warning()) {
		$config->save;
	}
}


exit 0;



# vim: ts=4 sw=4 noet
